//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nordware.AddOn.Lumix.Core.DAO {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SQL {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SQL() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Nordware.AddOn.Lumix.Core.DAO.SQL", typeof(SQL).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT
        ///	CASE WHEN ISNULL(OBTN.DistNumber, &apos;&apos;) &lt;&gt; &apos;&apos;
        ///		THEN OBTN.DistNumber
        ///		ELSE OSRN.DistNumber
        ///	END 				[Lote/Série],
        ///	SUM(ITL1.Quantity)	Quantidade
        ///FROM ITL1 WITH(NOLOCK)
        ///	LEFT JOIN OBTN WITH(NOLOCK)
        ///		ON OBTN.AbsEntry = ITL1.MdAbsEntry
        ///		AND OBTN.ItemCode = ITL1.ItemCode
        ///	LEFT JOIN OSRN WITH(NOLOCK)
        ///		ON OSRN.AbsEntry = ITL1.MdAbsEntry
        ///		AND OSRN.ItemCode = ITL1.ItemCode
        ///		AND ISNULL(OBTN.DistNumber, &apos;&apos;) = &apos;&apos;
        ///WHERE ITL1.ItemCode = $[$et_Item.0]
        ///GROUP BY 
        ///	OBTN.DistNumber,
        ///	OSRN.DistNumber
        ///HAVING SUM(IT [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BatchSerial_GetAvailable {
            get {
                return ResourceManager.GetString("BatchSerial_GetAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT
        ///	SUM(ITL1.Quantity)	Quantidade
        ///FROM ITL1 WITH(NOLOCK)
        ///	LEFT JOIN OBTN WITH(NOLOCK)
        ///		ON OBTN.AbsEntry = ITL1.MdAbsEntry
        ///		AND OBTN.ItemCode = ITL1.ItemCode
        ///	LEFT JOIN OSRN WITH(NOLOCK)
        ///		ON OSRN.AbsEntry = ITL1.MdAbsEntry
        ///		AND OSRN.ItemCode = ITL1.ItemCode
        ///		AND ISNULL(OBTN.DistNumber, &apos;&apos;) = &apos;&apos;
        ///WHERE ITL1.ItemCode = $[$et_Item.0]
        ///AND (ISNULL(OBTN.DistNumber, &apos;&apos;) = $[$et_DistNum.0] OR ISNULL(OSRN.DistNumber, &apos;&apos;) = $[$et_DistNum.0]).
        /// </summary>
        internal static string BatchSerial_GetQuantity {
            get {
                return ResourceManager.GetString("BatchSerial_GetQuantity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT CodeBars FROM OITM WHERE ItemCode= &apos;{0}&apos;.
        /// </summary>
        internal static string Item_GetCodeBar {
            get {
                return ResourceManager.GetString("Item_GetCodeBar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT  
        ///CASE WHEN ManBtchNum = &apos;Y&apos;
        ///	THEN &apos;B&apos;
        ///	ELSE 
        ///		CASE WHEN ManSerNum = &apos;Y&apos; THEN &apos;S&apos;
        ///		ELSE &apos;&apos;
        ///	END
        ///END
        ///FROM OITM WHERE ItemCode = &apos;{0}&apos;.
        /// </summary>
        internal static string Item_GetManagement {
            get {
                return ResourceManager.GetString("Item_GetManagement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT
        ///	PCH1.ItemCode,
        ///	CASE WHEN ISNULL(OBTN.DistNumber, &apos;&apos;) &lt;&gt; &apos;&apos;
        ///		THEN PCH1.Quantity
        ///		ELSE ITL1.Quantity
        ///	END Quantity,
        ///	CASE WHEN ISNULL(OBTN.DistNumber, &apos;&apos;) &lt;&gt; &apos;&apos;
        ///		THEN OBTN.DistNumber
        ///		ELSE OSRN.DistNumber
        ///	END DistNumber,
        ///	OITM.BuyUnitMsr as &apos;UnitCompra&apos;,
        ///	OITM.SalUnitMsr as &apos;UnitVenda&apos;
        ///FROM PCH1 WITH(NOLOCK)
        ///	LEFT JOIN OITL WITH(NOLOCK)
        ///		ON OITL.DocType = PCH1.ObjType 
        ///		AND OITL.DocEntry = PCH1.DocEntry 
        ///		AND OITL.DocLine = PCH1.LineNum
        ///	LEFT JOIN ITL1 WITH(NOLOCK)
        ///		ON ITL1.LogEntry = OITL.L [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PurchaseInvoice_GetItems {
            get {
                return ResourceManager.GetString("PurchaseInvoice_GetItems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT CAST(ISNULL(MAX(DistNumber), &apos;AA00000000&apos;) AS NVARCHAR(500)) FROM OSRN 
        ///WHERE DistNumber LIKE &apos;AA%&apos;.
        /// </summary>
        internal static string Serial_GetMax {
            get {
                return ResourceManager.GetString("Serial_GetMax", resourceCulture);
            }
        }
    }
}
