//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nordware.AddOn.Lumix.Core.DAO {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Hana {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Hana() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Nordware.AddOn.Lumix.Core.DAO.Hana", typeof(Hana).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT
        ///	CASE 
        ///		WHEN ISNULL(OBTN.&quot;DistNumber&quot;, &apos;&apos;) &lt;&gt; &apos;&apos; THEN OBTN.&quot;DistNumber&quot;
        ///		ELSE OSRN.&quot;DistNumber&quot;
        ///	END 				&quot;Lote/Série&quot;,
        ///	SUM(ITL1.&quot;Quantity&quot;)	&quot;Quantidade&quot;
        ///FROM ITL1
        ///LEFT JOIN OBTN ON ITL1.&quot;MdAbsEntry&quot; = OBTN.&quot;AbsEntry&quot; AND ITL1.&quot;ItemCode&quot; = OBTN.&quot;ItemCode&quot;
        ///LEFT JOIN OSRN ON ITL1.&quot;MdAbsEntry&quot; = OSRN.&quot;AbsEntry&quot; AND ITL1.&quot;ItemCode&quot; = OSRN.&quot;ItemCode&quot;	AND IFNULL(OBTN.&quot;DistNumber&quot;, &apos;&apos;) = &apos;&apos;
        ///WHERE ITL1.&quot;ItemCode&quot; = $[$et_Item.0]
        ///GROUP BY 
        ///OBTN.&quot;DistNumber&quot;,
        ///OSRN.&quot;DistNumber&quot;
        ///HAVING SUM(ITL1.&quot;Q [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BatchSerial_GetAvailable {
            get {
                return ResourceManager.GetString("BatchSerial_GetAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT SUM(ITL1.&quot;Quantity&quot;)	&quot;Quantidade&quot; FROM ITL1
        ///LEFT JOIN OBTN ON ITL1.&quot;MdAbsEntry&quot; = OBTN.&quot;AbsEntry&quot; AND ITL1.&quot;ItemCode&quot; = OBTN.&quot;ItemCode&quot;
        ///LEFT JOIN OSRN ON ITL1.&quot;MdAbsEntry&quot; = OSRN.&quot;AbsEntry&quot; AND ITL1.&quot;ItemCode&quot; = OSRN.&quot;ItemCode&quot;	AND IFNULL(OBTN.&quot;DistNumber&quot;, &apos;&apos;) = &apos;&apos;
        ///WHERE ITL1.&quot;ItemCode&quot; = $[$et_Item.0]
        ///AND (IFNULL(OBTN.&quot;DistNumber&quot;, &apos;&apos;) = $[$et_DistNum.0] OR IFNULL(OSRN.&quot;DistNumber&quot;, &apos;&apos;) = $[$et_DistNum.0]).
        /// </summary>
        internal static string BatchSerial_GetQuantity {
            get {
                return ResourceManager.GetString("BatchSerial_GetQuantity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT &quot;CodeBars&quot; FROM OITM WHERE &quot;ItemCode&quot; = &apos;{0}&apos;.
        /// </summary>
        internal static string Item_GetCodeBar {
            get {
                return ResourceManager.GetString("Item_GetCodeBar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT  
        ///	CASE 
        ///		WHEN &quot;ManBtchNum&quot; = &apos;Y&apos; THEN &apos;B&apos;
        ///		ELSE 
        ///			CASE WHEN &quot;ManSerNum&quot; = &apos;Y&apos; THEN &apos;S&apos;
        ///		ELSE &apos;&apos;
        ///	END
        ///END
        ///FROM OITM WHERE &quot;ItemCode&quot; = &apos;{0}&apos;.
        /// </summary>
        internal static string Item_GetManagement {
            get {
                return ResourceManager.GetString("Item_GetManagement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT
        ///	PCH1.&quot;ItemCode&quot;,
        ///	CASE WHEN IFNULL(OBTN.&quot;DistNumber&quot;, &apos;&apos;) &lt;&gt; &apos;&apos; THEN PCH1.&quot;Quantity&quot; ELSE ITL1.&quot;Quantity&quot; END &quot;Quantity&quot;,
        ///	CASE WHEN IFNULL(OBTN.&quot;DistNumber&quot;, &apos;&apos;) &lt;&gt; &apos;&apos; THEN OBTN.&quot;DistNumber&quot; ELSE OSRN.&quot;DistNumber&quot;	END &quot;DistNumber&quot;,
        ///	OITM.&quot;BuyUnitMsr&quot; &quot;UnitCompra&quot;,
        ///	OITM.&quot;SalUnitMsr&quot; &quot;UnitVenda&quot;
        ///FROM PCH1
        ///INNER JOIN OITM ON PCH1.&quot;ItemCode&quot;   = OITM.&quot;ItemCode&quot;
        ///LEFT JOIN OITL  ON PCH1.&quot;ObjType&quot;    = OITL.&quot;DocType&quot;  AND PCH1.&quot;DocEntry&quot; = OITL.&quot;DocEntry&quot; AND PCH1.&quot;LineNum&quot; = OITL.&quot;DocLine&quot;
        ///LEFT [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PurchaseInvoice_GetItems {
            get {
                return ResourceManager.GetString("PurchaseInvoice_GetItems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT IFNULL(MAX(CAST(SUBSTRING(&quot;DistNumber&quot;, 3) AS INT)), 0) FROM OSRN WHERE &quot;DistNumber&quot; LIKE &apos;AA%&apos;.
        /// </summary>
        internal static string Serial_GetMax {
            get {
                return ResourceManager.GetString("Serial_GetMax", resourceCulture);
            }
        }
    }
}
